// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ControllerChanged extends ethereum.Event {
  get params(): ControllerChanged__Params {
    return new ControllerChanged__Params(this);
  }
}

export class ControllerChanged__Params {
  _event: ControllerChanged;

  constructor(event: ControllerChanged) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class DefaultResolverChanged extends ethereum.Event {
  get params(): DefaultResolverChanged__Params {
    return new DefaultResolverChanged__Params(this);
  }
}

export class DefaultResolverChanged__Params {
  _event: DefaultResolverChanged;

  constructor(event: DefaultResolverChanged) {
    this._event = event;
  }

  get resolver(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReverseClaimed extends ethereum.Event {
  get params(): ReverseClaimed__Params {
    return new ReverseClaimed__Params(this);
  }
}

export class ReverseClaimed__Params {
  _event: ReverseClaimed;

  constructor(event: ReverseClaimed) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get node(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class ReverseRegistrarCCIP extends ethereum.SmartContract {
  static bind(address: Address): ReverseRegistrarCCIP {
    return new ReverseRegistrarCCIP("ReverseRegistrarCCIP", address);
  }

  claim(owner: Address): Bytes {
    let result = super.call("claim", "claim(address):(bytes32)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBytes();
  }

  try_claim(owner: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("claim", "claim(address):(bytes32)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  claimForAddr(addr: Address, owner: Address, resolver: Address): Bytes {
    let result = super.call(
      "claimForAddr",
      "claimForAddr(address,address,address):(bytes32)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(resolver)
      ]
    );

    return result[0].toBytes();
  }

  try_claimForAddr(
    addr: Address,
    owner: Address,
    resolver: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "claimForAddr",
      "claimForAddr(address,address,address):(bytes32)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(resolver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  claimWithResolver(owner: Address, resolver: Address): Bytes {
    let result = super.call(
      "claimWithResolver",
      "claimWithResolver(address,address):(bytes32)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(resolver)]
    );

    return result[0].toBytes();
  }

  try_claimWithResolver(
    owner: Address,
    resolver: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "claimWithResolver",
      "claimWithResolver(address,address):(bytes32)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(resolver)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  controllers(param0: Address): boolean {
    let result = super.call("controllers", "controllers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_controllers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("controllers", "controllers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  defaultResolver(): Address {
    let result = super.call(
      "defaultResolver",
      "defaultResolver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_defaultResolver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultResolver",
      "defaultResolver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ens(): Address {
    let result = super.call("ens", "ens():(address)", []);

    return result[0].toAddress();
  }

  try_ens(): ethereum.CallResult<Address> {
    let result = super.tryCall("ens", "ens():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRouter(): Address {
    let result = super.call("getRouter", "getRouter():(address)", []);

    return result[0].toAddress();
  }

  try_getRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRouter", "getRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isCCIPWhitelisted(sourceChainSelector: BigInt, sender: Address): boolean {
    let result = super.call(
      "isCCIPWhitelisted",
      "isCCIPWhitelisted(uint64,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(sourceChainSelector),
        ethereum.Value.fromAddress(sender)
      ]
    );

    return result[0].toBoolean();
  }

  try_isCCIPWhitelisted(
    sourceChainSelector: BigInt,
    sender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCCIPWhitelisted",
      "isCCIPWhitelisted(uint64,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(sourceChainSelector),
        ethereum.Value.fromAddress(sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  node(addr: Address): Bytes {
    let result = super.call("node", "node(address):(bytes32)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBytes();
  }

  try_node(addr: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("node", "node(address):(bytes32)", [
      ethereum.Value.fromAddress(addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setName(name: string): Bytes {
    let result = super.call("setName", "setName(string):(bytes32)", [
      ethereum.Value.fromString(name)
    ]);

    return result[0].toBytes();
  }

  try_setName(name: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall("setName", "setName(string):(bytes32)", [
      ethereum.Value.fromString(name)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  setNameForAddr(
    addr: Address,
    owner: Address,
    resolver: Address,
    name: string
  ): Bytes {
    let result = super.call(
      "setNameForAddr",
      "setNameForAddr(address,address,address,string):(bytes32)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(resolver),
        ethereum.Value.fromString(name)
      ]
    );

    return result[0].toBytes();
  }

  try_setNameForAddr(
    addr: Address,
    owner: Address,
    resolver: Address,
    name: string
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "setNameForAddr",
      "setNameForAddr(address,address,address,string):(bytes32)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(resolver),
        ethereum.Value.fromString(name)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get ensAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _router(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CcipReceiveCall extends ethereum.Call {
  get inputs(): CcipReceiveCall__Inputs {
    return new CcipReceiveCall__Inputs(this);
  }

  get outputs(): CcipReceiveCall__Outputs {
    return new CcipReceiveCall__Outputs(this);
  }
}

export class CcipReceiveCall__Inputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }

  get message(): CcipReceiveCallMessageStruct {
    return changetype<CcipReceiveCallMessageStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CcipReceiveCall__Outputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }
}

export class CcipReceiveCallMessageStruct extends ethereum.Tuple {
  get messageId(): Bytes {
    return this[0].toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this[1].toBigInt();
  }

  get sender(): Bytes {
    return this[2].toBytes();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }

  get destTokenAmounts(): Array<CcipReceiveCallMessageDestTokenAmountsStruct> {
    return this[4].toTupleArray<CcipReceiveCallMessageDestTokenAmountsStruct>();
  }
}

export class CcipReceiveCallMessageDestTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ClaimForAddrCall extends ethereum.Call {
  get inputs(): ClaimForAddrCall__Inputs {
    return new ClaimForAddrCall__Inputs(this);
  }

  get outputs(): ClaimForAddrCall__Outputs {
    return new ClaimForAddrCall__Outputs(this);
  }
}

export class ClaimForAddrCall__Inputs {
  _call: ClaimForAddrCall;

  constructor(call: ClaimForAddrCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get resolver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimForAddrCall__Outputs {
  _call: ClaimForAddrCall;

  constructor(call: ClaimForAddrCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ClaimWithResolverCall extends ethereum.Call {
  get inputs(): ClaimWithResolverCall__Inputs {
    return new ClaimWithResolverCall__Inputs(this);
  }

  get outputs(): ClaimWithResolverCall__Outputs {
    return new ClaimWithResolverCall__Outputs(this);
  }
}

export class ClaimWithResolverCall__Inputs {
  _call: ClaimWithResolverCall;

  constructor(call: ClaimWithResolverCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get resolver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimWithResolverCall__Outputs {
  _call: ClaimWithResolverCall;

  constructor(call: ClaimWithResolverCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetDefaultResolverCall extends ethereum.Call {
  get inputs(): SetDefaultResolverCall__Inputs {
    return new SetDefaultResolverCall__Inputs(this);
  }

  get outputs(): SetDefaultResolverCall__Outputs {
    return new SetDefaultResolverCall__Outputs(this);
  }
}

export class SetDefaultResolverCall__Inputs {
  _call: SetDefaultResolverCall;

  constructor(call: SetDefaultResolverCall) {
    this._call = call;
  }

  get resolver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDefaultResolverCall__Outputs {
  _call: SetDefaultResolverCall;

  constructor(call: SetDefaultResolverCall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetNameForAddrCall extends ethereum.Call {
  get inputs(): SetNameForAddrCall__Inputs {
    return new SetNameForAddrCall__Inputs(this);
  }

  get outputs(): SetNameForAddrCall__Outputs {
    return new SetNameForAddrCall__Outputs(this);
  }
}

export class SetNameForAddrCall__Inputs {
  _call: SetNameForAddrCall;

  constructor(call: SetNameForAddrCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get resolver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class SetNameForAddrCall__Outputs {
  _call: SetNameForAddrCall;

  constructor(call: SetNameForAddrCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
